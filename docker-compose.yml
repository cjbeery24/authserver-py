services:
  postgres:
    image: postgres:17-alpine
    container_name: authserver_postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c log_statement=all
      -c log_connections=on
      -c log_disconnections=on

  redis:
    image: redis:7-alpine
    container_name: authserver_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  authserver-web:
    build: .
    container_name: authserver_web
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME}
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=${DEBUG:-true}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_PRIVATE_KEY=${JWT_PRIVATE_KEY}
      - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:8000}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:8000}
    volumes:
      - ./frontend:/app/frontend # Mount frontend for hot reload during development
      - ./app:/app/app # Mount Python app for hot reload during development
      - ./alembic:/app/alembic # Mount alembic for database migrations
    command:
      [
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
      ]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
