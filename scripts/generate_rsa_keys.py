#!/usr/bin/env python3
"""
RSA Key Pair Generation Script for JWT Signing

This script generates RSA private/public key pairs for JWT signing.
Use this during deployment to create secure keys for your auth server.

Usage:
    python scripts/generate_rsa_keys.py [--key-size 2048] [--output-format env|pem]

Examples:
    # Generate keys and output as environment variables
    python scripts/generate_rsa_keys.py --output-format env

    # Generate keys and save as PEM files
    python scripts/generate_rsa_keys.py --output-format pem

    # Generate 4096-bit keys for extra security
    python scripts/generate_rsa_keys.py --key-size 4096
"""

import argparse
import sys
from pathlib import Path

# Add app directory to path so we can import our modules
sys.path.append(str(Path(__file__).parent.parent))

from app.core.security import RSAKeyManager


def generate_keys(key_size: int = 2048, output_format: str = "env"):
    """
    Generate RSA key pair and output in specified format.
    
    Args:
        key_size: RSA key size in bits
        output_format: Output format ('env' for environment variables, 'pem' for files)
    """
    print(f"Generating {key_size}-bit RSA key pair...")
    
    try:
        private_key_pem, public_key_pem = RSAKeyManager.generate_rsa_key_pair(key_size)
        
        if output_format == "env":
            # Output as environment variables
            print("\n" + "="*70)
            print("RSA KEY PAIR GENERATED SUCCESSFULLY")
            print("="*70)
            print("\nAdd these environment variables to your .env file:")
            print("\n# JWT RSA Keys (generated by generate_rsa_keys.py)")
            print("JWT_ALGORITHM=RS256")
            print("JWT_KEY_ID=auth-server-key-1")
            print(f'JWT_PRIVATE_KEY="{private_key_pem.strip()}"')
            print(f'JWT_PUBLIC_KEY="{public_key_pem.strip()}"')
            print("\n" + "="*70)
            print("SECURITY NOTES:")
            print("- Keep the private key secret and secure")
            print("- The public key can be safely shared")
            print("- Back up these keys securely")
            print("- Consider using key rotation for production")
            print("="*70)
            
        elif output_format == "pem":
            # Save as PEM files
            private_key_file = Path("jwt_private_key.pem")
            public_key_file = Path("jwt_public_key.pem")
            
            # Write private key
            with open(private_key_file, 'w') as f:
                f.write(private_key_pem)
            
            # Write public key
            with open(public_key_file, 'w') as f:
                f.write(public_key_pem)
            
            print(f"\n‚úÖ RSA key pair generated successfully!")
            print(f"üìÅ Private key saved to: {private_key_file.absolute()}")
            print(f"üìÅ Public key saved to: {public_key_file.absolute()}")
            print(f"\nüîí SECURITY WARNING:")
            print(f"   Keep {private_key_file} secure and private!")
            print(f"   {public_key_file} can be shared safely.")
            
            print(f"\nüìù Environment variables for .env file:")
            print(f"JWT_ALGORITHM=RS256")
            print(f"JWT_KEY_ID=auth-server-key-1")
            print(f"JWT_PRIVATE_KEY_FILE={private_key_file.absolute()}")
            print(f"JWT_PUBLIC_KEY_FILE={public_key_file.absolute()}")
            
        else:
            print(f"‚ùå Unknown output format: {output_format}")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error generating RSA keys: {str(e)}")
        return False


def main():
    """Main function with command line argument parsing."""
    parser = argparse.ArgumentParser(
        description="Generate RSA key pairs for JWT signing",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    parser.add_argument(
        "--key-size",
        type=int,
        default=2048,
        choices=[2048, 3072, 4096],
        help="RSA key size in bits (default: 2048)"
    )
    
    parser.add_argument(
        "--output-format",
        choices=["env", "pem"],
        default="env",
        help="Output format: 'env' for environment variables, 'pem' for files (default: env)"
    )
    
    args = parser.parse_args()
    
    print("üîê RSA Key Pair Generator for JWT Signing")
    print("=" * 50)
    
    success = generate_keys(args.key_size, args.output_format)
    
    if success:
        print("\n‚úÖ Key generation completed successfully!")
        if args.output_format == "env":
            print("\nüí° Next steps:")
            print("   1. Copy the environment variables to your .env file")
            print("   2. Restart your auth server")
            print("   3. Test the JWKS endpoint: GET /.well-known/jwks.json")
        else:
            print("\nüí° Next steps:")
            print("   1. Secure the private key file with appropriate permissions")
            print("   2. Update your .env file with the file paths")
            print("   3. Restart your auth server")
        sys.exit(0)
    else:
        print("\n‚ùå Key generation failed!")
        sys.exit(1)


if __name__ == "__main__":
    main()
