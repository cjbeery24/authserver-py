[pytest]
# Pytest configuration for auth server testing

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Minimum Python version
minversion = 7.0

# Console output
console_output_style = progress

# Show extra test summary info
addopts =
    # Verbose output
    -v
    # Show local variables in tracebacks
    -l
    # Show summary of all test outcomes
    -ra
    # Enable strict markers
    --strict-markers
    # Show warnings
    -W default
    # Coverage reporting
    --cov=app
    --cov-report=html
    --cov-report=term-missing
    --cov-report=xml
    # Fail if coverage below threshold
    --cov-fail-under=80
    # Asyncio mode
    --asyncio-mode=auto
    # Disable cacheprovider warnings
    -p no:cacheprovider

# Markers for categorizing tests
markers =
    unit: Unit tests for individual functions/classes
    integration: Integration tests for component interactions
    e2e: End-to-end tests for complete workflows
    security: Security-focused tests
    performance: Performance and load tests
    slow: Tests that take a long time to run
    database: Tests that require database connection
    redis: Tests that require Redis connection
    email: Tests that require email service

# Asyncio configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = app
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */migrations/*
    */alembic/*
    */__init__.py

[coverage:report]
precision = 2
show_missing = True
skip_covered = False

# Exclude lines from coverage
exclude_lines =
    # Standard pragma
    pragma: no cover
    # Debug-only code
    def __repr__
    if self.debug:
    if settings.debug:
    if TYPE_CHECKING:
    # Abstract methods
    raise NotImplementedError
    if __name__ == .__main__.:
    # Type checking
    @(abc\.)?abstractmethod
    # Defensive assertions
    assert False
    raise AssertionError

